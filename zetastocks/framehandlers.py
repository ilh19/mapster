import cgiimport osimport urllibimport stringfrom google.appengine.ext.webapp import templatefrom google.appengine.api import usersfrom google.appengine.ext import webappfrom google.appengine.ext.webapp.util import run_wsgi_appfrom google.appengine.ext import dbfrom postfunctions import *from dummyhandlers import *from helperfunctions import *class AddCapitalPage(webapp.RequestHandler):    def get(self):        current_user = UserCapital.gql("WHERE name = :1", users.get_current_user()).fetch(1)        if current_user:            capital_string = "$" + str(round(current_user.pop(0).free_capital, 2))        else:            capital_string = "You have no money."                # Check for errors        error_query = ErrorMessage.all()        error_entry = error_query.fetch(1)        if error_entry:            error_message = error_entry[0].error_string            is_error = True        else:            error_message = ""            is_error = False                    # Check for confirmation        confirm_query = ConfirmMessage.all()        confirm_entry = confirm_query.fetch(1)        if confirm_entry:            confirm_message = confirm_entry[0].confirm_string            is_confirm = True        else:            confirm_message = ""            is_confirm = False                template_values = {            'is_error': is_error,            'error_message': error_message,            'is_confirm': is_confirm,            'confirm_message': confirm_message,            'usercapstring': capital_string            }        path = os.path.join(os.path.dirname(__file__), 'logged_in/frames/frame_add_capital.html')        self.response.out.write(template.render(path, template_values))                # Reset error messages        for entry in error_query:            entry.delete()                # Reset confirmation messages        for entry in confirm_query:            entry.delete()class BuySellPage(webapp.RequestHandler):    def get(self):        # Check for errors        error_query = ErrorMessage.all()        error_entry = error_query.fetch(1)        if error_entry:            error_message = error_entry[0].error_string            is_error = True        else:            error_message = ""            is_error = False                # Check for confirmation        confirm_query = ConfirmMessage.all()        confirm_entry = confirm_query.fetch(1)        if confirm_entry:            confirm_message = confirm_entry[0].confirm_string            is_confirm = True        else:            confirm_message = ""            is_confirm = False                template_values = {            'is_error': is_error,            'error_message': error_message,            'is_confirm': is_confirm,            'confirm_message': confirm_message,            }                path = os.path.join(os.path.dirname(__file__), 'logged_in/frames/frame_buy_sell.html')        self.response.out.write(template.render(path, template_values))                # Reset error messages        for entry in error_query:            entry.delete()                # Reset confirmation messages        for entry in confirm_query:            entry.delete()        #checks to see if every element in a list are the same valuedef check_list_same(list):    for i in range(0, len(list) - 1):        if(i != 0):            if(list[i] != list[i-1]):                return False    return True#returns True or False      #checks a list for the highest valuedef  highest_value(list):    highest = -1    for value in list:        if(value > highest):            highest = value    return highest#returns the highest value in the list   #container class used to pass UserHistory information to the History frame of logged_in/my_portfolio.htmlclass HistoryElement():    date = ''    symbol = ''    price = '0.00'    shares = '0'    buy = False    type = ''    greater_than_zero = False              #webapp handler for the History frame in Portfolio in logged_in/Portfolio#It takes in information from the UserHistory datastore of the current user and passes all of the information#contained in that datastore about the users adding/removing capital, and the buying/selling of stocks that was done #elsewhere in the portfolio  class HistoryPage(webapp.RequestHandler):    def get(self):        history_query = UserHistory.gql("WHERE name = :1",users.get_current_user())        history = history_query.fetch(1)        fresh_start = "true"        histories = list() #list of HistoryElement that can be passed to the html page                if(len(history) > 0):            fresh_start = "false"                        #following code will check that all history list element lenghts are the same, and if not what the highest length is            sizes = list()            sizes.append(len(history[0].dates))            sizes.append(len(history[0].symbols))            sizes.append(len(history[0].prices))            sizes.append(len(history[0].shares))            sizes.append(len(history[0].buy))            sizes.append(len(history[0].types))            are_same = check_list_same(sizes)            highest = highest_value(sizes)                              #fill histories list with HistoryElements            for i in range(0, highest):                history_cell = HistoryElement()                history_cell.date = fix_date_time(history[0].dates[i])                history_cell.symbol = history[0].symbols[i]                history_cell.price = history[0].prices[i]                history_cell.shares = history[0].shares[i]                history_cell.buy = history[0].buy[i]                history_cell.type = history[0].types[i]                history_cell.greater_than_zero = float(history_cell.price) >= 0                if(not history_cell.greater_than_zero):                    history_cell.price = history_cell.price * -1                histories.insert(0,history_cell)                                else:    #if there is no history            fresh_start = "true"                        #making a default histories value            history_cell = HistoryElement()            history_cell.date = 'nothing'            history_cell.symbol = ''            history_cell.price = '1'            history_cell.shares = ''            history_cell.buy = False            history_cell.type = ''            histories.insert(0,history_cell)                #put variables onto the html page        count = 1;        template_values = {                'fresh_start': fresh_start,                'histories': histories,                'count': count                }                    path = os.path.join(os.path.dirname(__file__), 'logged_in/frames/frame_history.html')        self.response.out.write(template.render(path, template_values))#Passes information from the UserHistory datastore entry of the current user and passes it to the history frame of logged_in/my_portfolio.html        #container class used to pass information to the my_portfolio frameclass PortfolioStock():    stock = ''    shares = 0    amt_spent = 0.0    current_value = 0.0    total_value = 0.0     #This is the webapp handler that manages the my_portfolio frame under logged_in/Portfolio.html#It takes information from UserStocks which contains all of the information for the stocks the user has bought# and UserCapital, which contains information about how much capital that user currently has class MyPortfolioPage(webapp.RequestHandler):    def get(self):        #query datastore for current datastore value of UserStocks for current user        stocks_query = UserStocks.gql("WHERE name = :1",users.get_current_user())        stock_list = stocks_query.fetch(1)        fresh_start = "true" #if no stocks true                #query datastore for current free capital for the current user        capital_query = UserCapital.gql("WHERE name = :1",users.get_current_user())        capital_query_result = capital_query.fetch(1)        has_capital = "false" #if no capital false                stocks = list()             #stock information passes to my_portfolio        total_stock_value = 0.00    #total stock value of all of this user's stocks        free_capital = 0.00         #free capital this user has, frome UserCapital db        total_capital = 0.00        #total value of total_stock + free_capital                if(len(stock_list) > 0): #if a UserStocks entry for this user was found...            fresh_start = "false"            sizes = list()            sizes.append(len(stock_list[0].stocks))            sizes.append(len(stock_list[0].shares))            sizes.append(len(stock_list[0].amt_spent))            highest = highest_value(sizes)                        #build list of stocks            for i in range(0, highest):                stock_holder = PortfolioStock()                stock_holder.stock = stock_list[0].stocks[i]                stock_holder.shares = stock_list[0].shares[i]                stock_holder.amt_spent = stock_list[0].amt_spent[i]                stock_holder.current_value = (quote(stock_holder.stock))[1]                stock_holder.total_value = float(stock_holder.shares) * float(stock_holder.current_value)                stocks.append(stock_holder)                            #add up value of stocks            for stock in stocks:                total_stock_value = total_stock_value + stock.total_value                            if(len(capital_query_result) > 0): #if the UserCapital user datastore entry exists                has_capital = "true"                free_capital = capital_query_result[0].free_capital                            total_capital = free_capital + total_stock_value                    else: #no entries for UserStocks for this user were found            stock_holder = PortfolioStock()            stock_holder.stock = ''            stock_holder.shares = 0            stock_holder.amt_spent = 0.0            stock_holder.current_value = 0.0            stock_holder.total_value = 0.0            stocks.append(stock_holder)                        if(len(capital_query_result) > 0): #if the UserCapital user datastore entry exists                has_capital = "true"                free_capital = capital_query_result[0].free_capital                            total_capital = 0 + free_capital                    template_values = {                    'has_capital': has_capital,                    'free_capital': free_capital,                    'total_capital': total_capital,                    'fresh_start': fresh_start,                    'stocks': stocks,                    'total_stock_value': total_stock_value,                    }                    path = os.path.join(os.path.dirname(__file__), 'logged_in/frames/frame_my_portfolio.html')        self.response.out.write(template.render(path, template_values))#passes information from both UserCapital and Userstocks to the my_portfolio frame                # Displays the current watchlist belonging to the userclass WatchListPage(webapp.RequestHandler):    def get(self):        # Check for errors        error_query = ErrorMessage.all()        error_entry = error_query.fetch(1)        if error_entry:            error_message = error_entry[0].error_string            is_error = True        else:            error_message = ""            is_error = False                watchlist = UserWatches.all()        watchlist.filter("name =",users.get_current_user())        watchlist.order("stocks")        disp_watchlist = watchlist.fetch(100)                watch = list()        for i in range(0, len(disp_watchlist)):            watchList = WatchList()            current_watch = disp_watchlist[i].stocks            quoted = quote(current_watch) #           watch.append(quote(current_watch))            watchList.symbol = quoted[0]            watchList.price = quoted[1]            watchList.change = quoted[4]            watchList.companyname = quoted[7]            watch.append(watchList)           template_values = {            'watchlists': watch,            'is_error': is_error,            'error_message': error_message,            }        path = os.path.join(os.path.dirname(__file__), 'logged_in/frames/frame_watch_list.html')        self.response.out.write(template.render(path, template_values))                # Reset error messages        for entry in error_query:            entry.delete()