import cgiimport osimport urllibimport stringfrom google.appengine.ext.webapp import templatefrom google.appengine.api import usersfrom google.appengine.ext import webappfrom google.appengine.ext.webapp.util import run_wsgi_appfrom google.appengine.ext import dbimport twitterfrom helperfunctions import *    # ################## ## Logged out Handlers ## ################## #      #webapp handler for /default/index.htmlclass SendToIndex(webapp.RequestHandler):    def get(self):        self.redirect('/default/index.html')        #webapp handler for /default/about.htmlclass AboutPage(webapp.RequestHandler):    def get(self):        template_values = {            'loginurl': users.create_login_url('logged_in/index.html'),            }        path = os.path.join(os.path.dirname(__file__), 'default/about.html')        self.response.out.write(template.render(path, template_values))        #webapp handler for /default/contact.html        class ContactPage(webapp.RequestHandler):    def get(self):        template_values = {            'loginurl': users.create_login_url('logged_in/index.html'),            }        path = os.path.join(os.path.dirname(__file__), 'default/contact.html')        self.response.out.write(template.render(path, template_values))        #webapp handler for /default/signup.html        class SignupPage(webapp.RequestHandler):    def get(self):        template_values = {            'loginurl': users.create_login_url('logged_in/index.html'),            }        path = os.path.join(os.path.dirname(__file__), 'default/signup.html')        self.response.out.write(template.render(path, template_values))        #webapp handler for /default/why.html        class WhyPage(webapp.RequestHandler):    def get(self):        template_values = {            'loginurl': users.create_login_url('logged_in/index.html'),            }        path = os.path.join(os.path.dirname(__file__), 'default/why.html')        self.response.out.write(template.render(path, template_values))        # ################## ## Logged in Handlers ## ################## ##webapp handler for logged_in/index.htmlclass LoggedMain(webapp.RequestHandler):    def get(self):        if(not settings_exist()):            create_default_setting()                DJTweets = twitter.getTweets("Dow%20Jones",5)        NasdaqTweets = twitter.getTweets("Nasdaq",5)        SP500Tweets = twitter.getTweets("S%26P%20500",5)                template_values = {                            'logouturl': users.create_logout_url('default/index.html'),                            'DowJones': DJTweets,                            'Nasdaq': NasdaqTweets,                            'SP500': SP500Tweets,                          }        path = os.path.join(os.path.dirname(__file__), 'logged_in/index.html')        self.response.out.write(template.render(path, template_values))#if no settings exist for currenct user, creates default settings for that userclass LoggedContact(webapp.RequestHandler):    def get(self):        template_values = {                            'logouturl': users.create_logout_url('default/index.html'),                          }        path = os.path.join(os.path.dirname(__file__), 'logged_in/contact.html')        self.response.out.write(template.render(path, template_values))                #webapp handler for logged_in/portfolio.html        class PortfolioPage(webapp.RequestHandler):    def get(self):        template_values = {                            'logouturl': users.create_logout_url('default/index.html'),                          }        path = os.path.join(os.path.dirname(__file__), 'logged_in/portfolio.html')        self.response.out.write(template.render(path, template_values))        #webapp handler for logged_in/help.html        class HelpPage(webapp.RequestHandler):    def get(self):        template_values = {                            'logouturl': users.create_logout_url('default/index.html'),                          }        path = os.path.join(os.path.dirname(__file__), 'logged_in/help.html')        self.response.out.write(template.render(path, template_values))        #webapp handler for logged_in/settings.html        class SettingsPage(webapp.RequestHandler):    def get(self):        settings_query = UserSettings.all()        settings_query.filter("author =",users.get_current_user())        settings_query.order("-date")        settings = settings_query.fetch(1)                current_currency = ''        if(len(settings) > 0): #if a setting already exists for this user            current_currency = settings[0].defaultcurrency        else:            create_default_setting()            current_currency = "U.S. Dollars"        template_values = {                    'current_currency': current_currency,                    'logouturl': users.create_logout_url('default/index.html'),                          }        path = os.path.join(os.path.dirname(__file__), 'logged_in/settings.html')        self.response.out.write(template.render(path, template_values))        #class used to pass stock information through django templates to the quote.html file        class StockQuote():    symbol = ' '    price = ' '    date = ' '    time = ' '    change = ' '    priceafterhours = ' '    companyname = ' '    currency = ' '  #webapp handler for the logged_in/quotes.html    class QuotesPage(webapp.RequestHandler):     def get(self):    #query the datastore for last query made by current user        stocks_query = Stock.all()        stocks_query.filter("author =",users.get_current_user())        stocks_query.order("-date")        stocks = stocks_query.fetch(1)        change_positive = False #if the change in stock was positive, is True, else is False        tweets = ''        fresh_start = "false" #if no elements in stocks, contains "false", else "true"                if(len(stocks) > 0): # if we recieved a value when we queried the datastore            has_image = True                    symbol_name = stocks[0].content            currency = stocks[0].currency            stocks[0].delete()                        if users.get_current_user():                url = users.create_logout_url(os.path.join(os.path.dirname(__file__), 'default/index.html'))                url_linktext = 'Logout'            else:                url = users.create_login_url(os.path.join(os.path.dirname(__file__), 'logged_in/index.html'))                url_linktext = 'Login'                    stock_quote = StockQuote()            if not stock_is_valid(symbol_name):                symbol_name = "INVALID"            quoted = quote(symbol_name)            stock_quote.symbol = quoted[0]            price = quoted[1]            change = float(quoted[4])            priceAfterHours = quoted[6]            if(float(price) > 0): #if the stock was valid the price will be > 0 (error code has price = "-1")                stock_quote.price = convert("usd", name_to_code(currency), float(price))                stock_quote.date = quoted[2]                stock_quote.time = quoted[3]                if change < 0: #negative number fix                    ratio = convert("usd", name_to_code(currency), float(1))                    stock_quote.change = change * float(ratio)                else:                    stock_quote.change = convert("usd", name_to_code(currency), float(change))                stock_quote.priceafterhours = convert("usd", name_to_code(currency), float(priceAfterHours))                stock_quote.companyname = quoted[7]                stock_quote.currency = currency                change_positive = float(stock_quote.change) > 0                #try except block in case something strage happens with the twitter code                try:                    tweets = twitter.getTweets(stock_quote.symbol, 5) #if stock is valid, get tweets about that stock                except: #returns empty string for the tweet values                    tweets = ''            else: #if stock is invalid                stock_quote.symbol = "Invalid"                stock_quote.price = "0.00"                stock_quote.date = ''                stock_quote.time = ''                stock_quote.change = ''                stock_quote.priceafterhours = ''                stock_quote.companyname = ''                stock_quote.currency = ''                            pictureurl = "<img src = " + image(stock_quote.symbol) + "/>"                else: #else if we recieved no values from the datastore            has_image = False            fresh_start = "true"            if users.get_current_user():                url = users.create_logout_url(os.path.join(os.path.dirname(__file__), 'default/index.html'))                url_linktext = 'Logout'            else:                url = users.create_login_url(os.path.join(os.path.dirname(__file__), 'logged_in/index.html'))                url_linktext = 'Login'                            #for no quote entries, puts default values into stock_quote            stock_quote = StockQuote()            stock_quote.price = ''            stock_quote.date = ''            stock_quote.time = ''            stock_quote.change = ''            stock_quote.priceafterhours = ''            stock_quote.companyname = ''            stock_quote.currency = ''            pictureurl = '' #default value of picture url                 template_values = { #values passed to quotes.html            'fresh_start': fresh_start,            'tweets': tweets,            'change_positive': change_positive,            'has_image': has_image,            'url': url,            'url_linktext': url_linktext,            'quote': stock_quote,            'pictureurl': pictureurl,            'logouturl': users.create_logout_url('default/index.html'),             }                path = os.path.join(os.path.dirname(__file__), 'logged_in/quotes.html')        self.response.out.write(template.render(path, template_values))      #webapp handler for the form found in logged_in/quotes.html     class GetQuote(webapp.RequestHandler):    def post(self):        stock = Stock()        if users.get_current_user():            stock.author = users.get_current_user()        stock.content = self.request.get('content')        stock.currency = self.request.get('currency')        stock.put()        self.redirect('/logged_in/quotes.html')#puts the quote into the quotes datastore and redirects back to /logged_in/quotes.html           