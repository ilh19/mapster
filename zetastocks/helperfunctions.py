# All of the Databases and helper functions used are defined here. # All Databases consist of "name" variable for the user that is logged in.# They also contain lists of values representing each stock. import cgiimport osimport urllibimport stringimport datetime,time,mathfrom google.appengine.ext import webappfrom google.appengine.ext import dbfrom google.appengine.api import usersclass ErrorMessage(db.Model):    error_string = db.StringProperty(multiline=False)class ConfirmMessage(db.Model):    confirm_string = db.StringProperty(multiline=False)class UserSettings(db.Model):    author = db.UserProperty()    date = db.DateTimeProperty(auto_now_add=True)    defaultcurrency = db.StringProperty(multiline=False)class UserCapital(db.Model):    name = db.UserProperty()    free_capital = db.FloatProperty()class UserWatches(db.Model):    name = db.UserProperty()    stocks = db.StringProperty()class UserStocks(db.Model):    name = db.UserProperty()    stocks = db.ListProperty(str)    shares = db.ListProperty(int)    amt_spent = db.ListProperty(float)class UserHistory(db.Model):    name = db.UserProperty()    types = db.ListProperty(str) # Types are "capital" or "buy/sell"    dates = db.ListProperty(datetime.datetime)    symbols = db.ListProperty(str)    prices = db.ListProperty(float)    shares = db.ListProperty(int)    buy = db.ListProperty(bool)  # True is bought, False is sold        #class used to store quote values in the datastore class Stock(db.Model):    author = db.UserProperty()    content = db.StringProperty(multiline=True)    currency = db.StringProperty(multiline=False)    date = db.DateTimeProperty(auto_now_add=True)       class WatchList():    symbol = ' '    price = ' '    change = ' '    companyname = ' '    def name_to_code(name):    if(name == "U.S. Dollar"):        return "usd"    elif(name == "Euro"):        return "eur"    elif(name == "Japanese Yen"):        return "jpy"    elif(name == "Canadian Dollar"):        return "cad"    elif(name == "Mexican Peso"):        return "mxn"    elif(name == "Chinese Yuan"):        return "cny"    else:        return "mxn"          # Takes in a symbol and outputs it in HTMLdef symbol_to_html(symbol):    if(symbol == "Euro"):              return "&#8364"    elif(symbol == "Japanese Yen"):             return "&#165"    elif(symbol == "Chinese Yuan"):            return "&#165"    else:        return "&#36"                #queries finance.yahoo with a particular stock symboldef quote(s):    try:        rssurl = urllib.urlopen("http://finance.yahoo.com/d/quotes.csv?s=%s&f=sl1d1t1c6b3b2n&e=.csv" %(s))        rssfeed = rssurl.read()        rssfeed = rssfeed.replace('"','')        data = rssfeed.split(",")        return data    except IOError:        return [s, "-1","","","","","",""]    except DownloadError:        return [s, "-1","","","","","",""]    except:        return [s, "-1","","","","","",""]#returns a list of elements in this order: [symbol, price, date, time, change, price after hours, company name]    #returns the image url for a chart for the given stock sdef image(s):         imageurl = "http://ichart.finance.yahoo.com/b?s=%s&lang=en-US&region=US" %(s)    return imageurl    #for given string s, turns all of its characters to upper case    def set_caps(s):    s.split(",")    for c in s:        if (not c.isupper()):            c.swapcase()    t = " "    for c in s:        t = t + c    return t        #returns true if a stock symbol is valid, else returns falsedef stock_is_valid(symbol):    try: #if the website exists, the stock symbol is valid        if symbol.isalpha():            rssurl = urllib.urlopen("http://finance.yahoo.com/d/quotes.csv?s=%s&f=sl1d1t1c6b3b2n&e=.csv" %(symbol))            rssfeed = rssurl.read()            rssfeed = rssfeed.replace('"','')            data = rssfeed.split(",")            isgood = float(data[1])            if(isgood <= 0):                return False            else:                return True        else:            return False    except IOError: #else a IOError exception will be thrown        return False    except ValueError:        return False    except DownloadError:        return False    except:        return False        #uses the exchange rate api to convert stocks from one currency to another given a value vdef convert(s,t,v):    try:        API_key = "t6uTv-nQSO9-Nin9I"        url = urllib.urlopen("http://www.exchangerate-api.com/%s/%s/%f?k=%s" %(s,t,v,API_key))        result = url.read()        return result    except IOError:        return "could not connect to exchange api"    except DownloadError:        return "could not connect to exchange api"    except:        return "could not connect to exchange api"#returns a string with the converted value    #checks to see if a setting entry exists for the current userdef settings_exist():    settings_query = UserSettings.all()    settings_query.filter("author =",users.get_current_user())    settings_query.order("-date")    settings = settings_query.fetch(1)    if(len(settings) > 0): #if a setting already exists for this user        return True    else:        return False#returns true if a setting datastore entry exists for the current user        #called to create the default setting for a userdef create_default_setting():    settings = UserSettings()            if(users.get_current_user()):        settings.author = users.get_current_user()            settings.defaultcurrency = "U.S. Dollars"    settings.put()#puts default settings into the datastore for the current user#takes in the wierd date format that google gives us (which includes time up to nanoseconds)def fix_date_time(date):    date_str = str(date)    result = date_str.partition('.')    return result[0]#removes nanoseconds from date    